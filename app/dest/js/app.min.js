'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Contact = function () {
    function Contact(lastName, firstName, gender, age, check) {
        _classCallCheck(this, Contact);

        this.lastName = lastName;
        this.firstName = firstName;
        this.gender = gender;
        this.age = age;
        this.check = check;
    }

    _createClass(Contact, [{
        key: 'empty',
        value: function empty() {
            if (this.fieldEmpty('lastName') || this.fieldEmpty('firstName') || this.fieldEmpty('gender') || this.fieldEmpty('age')) return true;else return false;
        }
    }, {
        key: 'fieldEmpty',
        value: function fieldEmpty(name) {
            if (this[name] === null || this[name] === undefined || this[name] === "" || this[name] === 0) return true;else return false;
        }
    }]);

    return Contact;
}();
'use strict';

$(function () {

    Vue.prototype.$eventHub = new Vue();

    var config = {
        errorBagName: 'errors', // change if property conflicts
        fieldsBagName: 'fields',
        delay: 0,
        locale: 'en',
        dictionary: null,
        strict: true,
        classes: true,
        classNames: {
            touched: 'touched', // the control has been blurred
            untouched: 'untouched', // the control hasn't been blurred
            valid: 'valid', // model is valid
            invalid: 'invalid', // model is invalid
            pristine: 'pristine', // control has not been interacted with
            dirty: 'dirty' // control has been interacted with
        },
        events: 'input|blur|submit',
        inject: true,
        validity: true,
        aria: true
    };

    Vue.use(VeeValidate, config);

    if ($('#root')) {
        new Vue({
            el: '#root',
            data: {
                contacts: [],
                contact: new Contact(),
                age: [20, 21, 22, 23, 24],
                gender: [{ label: 'Male', value: 'm', check: true }, { label: 'Female', value: 'f', check: false }],
                example: {
                    upper: 'Upper',
                    lower: 'Lower',
                    trim: '   trim    ',
                    number: 'number',
                    bool: false,
                    string: 'test',
                    title: 'title',
                    replace: 'abcdefgjklmnoprstqwyz',
                    address: ' Lgh VÃ¤g',
                    postalCode: '11111',
                    phoneNumber: '32321231321'
                },
                validation: {}
            },
            mounted: function mounted() {
                var _this = this;

                this.contacts = [new Contact('iuhwef', 'wefwef', 'm', 20), new Contact('efwg', 'fweg', 'f', 22), new Contact('iuhwef', 'hrth', 'm', 24), new Contact('gerrhe', 'rehewrg', 'f', 21), new Contact('sdgsgtwe', 'wegwe', 'f', 22)];
                this.$eventHub.$on('errors-changed', function (newErrors, oldErrors, name) {
                    if (oldErrors !== undefined && Array.isArray(oldErrors)) {
                        if (oldErrors.length === 0) {} else {
                            oldErrors.forEach(function (error) {
                                _this.errors.remove(error.field);
                            });
                        }
                    }
                    if (newErrors !== undefined && Array.isArray(newErrors)) {
                        if (newErrors.length === 0) {
                            _this.errors.remove(name);
                        } else {
                            newErrors.forEach(function (error) {
                                if (!_this.errors.has(error.field)) {
                                    _this.errors.add(error.field, error.msg, error.rule);
                                }
                            });
                        }
                    }
                });
            },

            methods: {
                // getContact: function (contact) {
                //     this.contact = contact;
                // },
                // addContact() {
                //     this.isValid();
                //     if (!this.contact.empty()) {
                //         this.contacts.push(this.contact);
                //         this.contact = new Contact();
                //         this.reset();
                //     }
                // },
                // reset: function () {
                //     this.contact = new Contact();
                //     this.$children.map(function (child) {
                //         child.$validator.reset();
                //     });
                // },
                // isValid: function () {
                //     this.$children.map(function (child) {
                //         child.$validator.validateAll()
                //             .then(response => {
                //                 return response;
                //             })
                //             .catch(response => {
                //                 return response;
                //             });
                //     });
                // },
                submit: function submit() {
                    console.log(this);
                    this.$eventHub.$emit('validate');
                }
            }
        });
    }
});