'use strict';

//upper
Vue.filter('upperCase', function (value) {
    return value.toUpperCase();
});

//lower
Vue.filter('lowerCase', function (value) {
    return value.toLowerCase();
});

//trim
Vue.filter('trim', function (value) {
    return value.trim();
});

//number
Vue.filter('number', function (value) {
    return Number(value);
});

//bool
Vue.filter('bool', function (value) {
    return Boolean(value);
});

//string
Vue.filter('string', function (value) {
    return String(value);
});

//title
Vue.filter('title', function (value) {
    return value.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
});

//replace
Vue.filter('replace', function (value, strWith, strTo) {
    var regex = new RegExp(strWith, 'g');
    return value.replace(regex, strTo);
});

//address
Vue.filter('address', function (value) {
    value = value.replace(' Väg', ' väg');
    value = value.replace(' Lgh', ' lgh');
    value = value.replace(' Allé', ' allé');
    value = value.replace(' Gata', ' gata');
    value = value.replace(' Backe', ' backe');
    value = value.replace(' C/o ', ' c/o ');

    return value;
});

//postalCode
Vue.filter('postalCode', function (value) {
    if (value.match(/[0-9]{5}/)) {
        return value.substr(0, 3) + ' ' + value.substr(3, 2);
    }
    return value;
});

//phoneNumber
Vue.filter('phoneNumber', function (value) {
    var re = /(?:([\d]{1,}?))??(?:([\d]{1,3}?))??(?:([\d]{1,3}?))??(?:([\d]{2}))??([\d]{2})$/;
    return value.replace(/[^0-9]/g, '').replace(re, function (all, a, b, c, d, e) {
        return (a ? "+ " + a + " " : "") + (b ? b + " " : "") + (c ? c + "-" : "") + (d ? d + "-" : "") + e;
    });
});
'use strict';

$(function () {

    Vue.use(VeeValidate);

    var index = new Vue({
        el: '#root',
        data: {
            users: [],
            user: [],
            obj: {
                hidden: "hide",
                number: 123,
                text: 'text',
                date: '05/12/205',
                file: '',
                email: 'test@test.',
                password: 'pass',
                checkbox: false,
                radio: 'one',
                textarea: ''

            }
        },
        mounted: function mounted() {
            var _this = this;

            axios.get('https://jsonplaceholder.typicode.com/users?_limit=10').then(function (response) {
                _this.users = response.data;
                _this.user = _this.users[0];
            }).catch(function (response) {
                console.log(response.data);
            });
        },
        methods: {
            getUser: function getUser(user) {
                this.user = user;
            },
            submit: function submit() {
                if (this.isValid()) {
                    this.$validator.validateAll();
                    axios.post('https://jsonplaceholder.typicode.com/users', this.user).then(function (response) {
                        console.log(response);
                    }).catch(function (response) {
                        console.log(response.data);
                    });
                }
            },
            isValid: function isValid() {
                for (var i = 0; i < this.$children.length; i++) {
                    if (this.$children[i].$validator.errors.any()) {
                        return false;
                    }
                }
                return true;
            }
        }
    });
});
'use strict';

Vue.component('input-box', {
    template: '<div class="form-group" :class="{\'has-error\': this.errors.has(name), \'has-helper\': helper, \'stacked\': stacked }">\n' + '        <div :class="{\'col-sm-4\': !stacked}" v-if="label">\n' + '            <label class="control-label">{{ label }}: <span v-if="required">*</span></label>\n' + '            <p class="help-block" v-text="helper" v-if="helper"></p>\n' + '        </div>\n' + '        <div class="control-container" :class="{\'col-sm-8\': (!stacked && label)}">\n' + '            <div :class="{\'input-group\': usingAddons}">\n' + '                <div class="input-group-addon" v-if="slotExists(\'leftAddon\')">\n' + '                    <slot name="leftAddon"></slot>\n' + '                </div>\n' + '                <div class="input-group-btn" v-if="slotExists(\'leftBtn\')">\n' + '                    <slot name="leftBtn"></slot>\n' + '                </div>\n' + '\n' + '                <input :type="type" v-on:input="updateValue($event.target.value)" v-on:blur="blur($event.target.value)" class="form-control" v-on:keyup.enter="enterKeyPressed"\n' + '                       :name="name" :id="id" :readonly="readonly" :value="value" :placeholder="placeholder" v-validate.initial :data-vv-rules="rules">\n' + '\n' + '                <div class="input-group-addon" v-if="slotExists(\'rightAddon\')">\n' + '                    <slot name="rightAddon"></slot>\n' + '                </div>\n' + '                <div class="input-group-btn" v-if="slotExists(\'rightBtn\')">\n' + '                    <slot name="rightBtn"></slot>\n' + '                </div>\n' + '            </div>\n' + '            <p class="text-danger" v-if="showError" v-text="errorMessage"></p>\n' + '            <p class="text-danger" v-if="this.errors.has(name)" v-text="this.errors.first(name)"></p>\n' + '        </div>\n' + '        <div class="clearfix"></div>\n' + '    </div>',
    props: {
        name: {
            type: String,
            required: true
        },
        label: String,
        helper: String,
        showError: {
            type: Boolean,
            default: false
        },
        placeholder: String,
        stacked: {
            type: Boolean,
            default: false
        },
        value: [String, Number],
        type: {
            type: String,
            default: function _default() {
                return 'text';
            }
        },
        required: {
            type: Boolean,
            default: false
        },
        readonly: {
            type: Boolean,
            default: false
        },
        id: String,
        errorMessage: String,
        rules: String
    },
    computed: {
        usingAddons: function usingAddons() {
            return !(Object.keys(this.$slots).length === 0 && this.$slots.constructor === Object);
        }
    },
    methods: {
        enterKeyPressed: function enterKeyPressed() {
            this.$emit('enter');
        },
        updateValue: function updateValue(value) {
            this.$emit('input', value);
        },
        blur: function blur(value) {
            this.$emit('blur', value);
        },
        slotExists: function slotExists(name) {
            return name in this.$slots;
        }
    }

});
'use strict';

Vue.component('list-box', {
    template: '<div class="form-group" :class="{\'has-error\': this.errors.has(name), \'has-helper\': helper, \'stacked\': stacked }">\n' + '        <div :class="{\'col-sm-4\': !stacked}" v-if="label">\n' + '            <label class="control-label">{{ label }}: <span v-if="required">*</span></label>\n' + '            <p class="help-block" v-text="helper" v-if="helper"></p>\n' + '        </div>\n' + '        <div class="control-container" :class="{\'col-sm-8\': (!stacked && label)}">\n' + '            <div :class="{\'input-group\': usingAddons}">\n' + '                <div class="input-group-addon" v-if="slotExists(\'leftAddon\')">\n' + '                    <slot name="leftAddon"></slot>\n' + '                </div>\n' + '                <div class="input-group-btn" v-if="slotExists(\'leftBtn\')">\n' + '                    <slot name="leftBtn"></slot>\n' + '                </div>\n' + '                <select :name="name" :id="name" class="form-control" v-on:change="updateValue($event.target.value)" v-validate.initial :data-vv-rules="rules">\n' + '                    <option value="" readonly v-text="placeholder" v-if="placeholder"\n' + '                            :selected="value == null || value == \'\'"></option>\n' + '                    <option v-for="option in options" :value="option[keyName]" v-text="option[keyName]"\n' + '                            :selected="option[keyName] == value"></option>\n' + '                </select>\n' + '                <div class="input-group-addon" v-if="slotExists(\'rightAddon\')">\n' + '                    <slot name="rightAddon"></slot>\n' + '                </div>\n' + '                <div class="input-group-btn" v-if="slotExists(\'rightBtn\')">\n' + '                    <slot name="rightBtn"></slot>\n' + '                </div>\n' + '            </div>\n' + '            <p class="text-danger" v-if="showError" v-text="errorMessage"></p>\n' + '            <p class="text-danger" v-if="this.errors.has(name)" v-text="this.errors.first(name)"></p>\n' + '        </div>\n' + '        <div class="clearfix"></div>\n' + '    </div>\n',
    props: {
        name: {
            type: String,
            required: true
        },
        label: {
            type: String
        },
        options: {
            // type: Array,
            required: true
        },
        keyName: {
            type: String,
            default: function _default() {
                return 'id';
            }
        },
        labelName: {
            type: String,
            default: function _default() {
                return 'label';
            }
        },
        helper: String,
        showError: {
            type: Boolean,
            default: false
        },
        placeholder: String,
        stacked: {
            type: Boolean,
            default: false
        },
        value: {},
        required: {
            type: Boolean,
            default: false
        },
        errorMessage: String,
        rules: String
    },
    methods: {
        slotExists: function slotExists(name) {
            return name in this.$slots;
        },
        updateValue: function updateValue(value) {
            this.$emit('input', value);
        }
    },
    computed: {
        usingAddons: function usingAddons() {
            return !(Object.keys(this.$slots).length === 0 && this.$slots.constructor === Object);
        }
    },
    updated: function updated() {
        if (this.options.length) {
            var element = document.getElementById(this.name);
            if (element.options[element.selectedIndex]) {
                this.updateValue(element.options[element.selectedIndex].value);
            }
        }
    }
});
'use strict';

Vue.component('switch-checkbox', {
    template: '<div class="form-group switch-group">\n' + '        <div :class="{\'col-sm-4\': ! stacked}" v-if="label">\n' + '            <label class="control-label" :for="id">{{ label }}</label>\n' + '            <p class="help-block" v-if="helper">{{ helper }}</p>\n' + '        </div>\n' + '        <div :class="{\'col-sm-8\': ! stacked  }">\n' + '            <label class="switch-component">\n' + '                <input :type="type" :id="id" :name="name" :checked="checked" v-on:change="updateValue($event.target.checked)" :class="{\'has-error\': this.errors.has(name)}">\n' + '                <div class="slider round">\n' + '                    <span class="yes-label" v-if="labels">Yes</span>\n' + '                    <span class="no-label" v-if="labels">No</span>\n' + '                </div>\n' + '            </label>\n' + '        </div>\n' + '    </div>',
    model: {
        prop: 'checked',
        event: 'change'
    },
    props: {
        name: {
            type: String,
            required: true
        },
        labels: {
            type: Boolean,
            default: false
        },
        label: {
            type: String
        },
        stacked: Boolean,
        helper: String,
        id: String,
        checked: Boolean,
        labelColumn: {
            type: String,
            default: 'col-sm-2'
        },
        inputColumn: {
            type: String,
            default: 'col-sm-10'
        },
        type: {
            type: String,
            default: 'checkbox'
        }
    },
    methods: {
        updateValue: function updateValue(value) {
            this.$emit('change', value);
        }
    }
});
'use strict';

Vue.component('switch-radio', {
    template: '<div class="form-group switch-group">\n' + '        <div :class="{\'col-sm-4\': ! stacked}" v-if="label">\n' + '            <label class="control-label" :for="id">{{ label }}</label>\n' + '            <p class="help-block" v-if="helper">{{ helper }}</p>\n' + '        </div>\n' + '        <div :class="{\'col-sm-8\': ! stacked  }">\n' + '            <label class="switch-component">\n' + '                <input :value="value" :type="type" :id="id" :name="name" :checked="checked" v-on:change="updateValue($event.target.value)" >\n' + '                <div class="slider round">\n' + '                    <span class="yes-label" v-if="labels">Yes</span>\n' + '                    <span class="no-label" v-if="labels">No</span>\n' + '                </div>\n' + '            </label>\n' + '        </div>\n' + '    </div>',
    model: {
        prop: 'checked',
        event: 'change'
    },
    props: {
        name: {
            type: String,
            required: true
        },
        labels: {
            type: Boolean,
            default: false
        },
        label: {
            type: String
        },
        stacked: Boolean,
        helper: String,
        id: String,
        checked: {},
        labelColumn: {
            type: String,
            default: 'col-sm-2'
        },
        inputColumn: {
            type: String,
            default: 'col-sm-10'
        },
        type: {
            type: String,
            default: 'checkbox'
        },
        value: {}
    },
    methods: {
        updateValue: function updateValue(value) {
            this.$emit('change', value);
        }
    }
});
'use strict';

Vue.component('textarea-box', {
    template: ' <div class="form-group" :class="{\'has-error\': this.errors.has(name), \'has-helper\': helper, \'stacked\': stacked }">\n' + '        <div :class="{\'col-sm-4\': !stacked}" v-if="label">\n' + '            <label class="control-label">{{ label }}: <span v-if="required">*</span></label>\n' + '            <p class="help-block" v-text="helper" v-if="helper"></p>\n' + '        </div>\n' + '        <div class="control-container" :class="{\'col-sm-8\': !stacked}">\n' + '            <textarea v-validate.initial :data-vv-rules="rules" :name="name" id="name" rows="5" v-on:input="updateValue($event.target.value)"\n' + '                      :value="value" class="form-control"></textarea>\n' + '            <p class="text-danger" v-if="showError" v-text="errorMessage"></p>\n' + '            <p class="text-danger" v-if="this.errors.has(name)" v-text="this.errors.first(name)"></p>\n' + '        </div>\n' + '        <div class="clearfix"></div>\n' + '    </div>',
    props: {
        name: {
            type: String,
            required: true
        },
        label: {
            type: String
        },
        helper: String,
        showError: {
            type: Boolean,
            default: false
        },
        stacked: {
            type: Boolean,
            default: false
        },
        value: [String],
        required: {
            type: Boolean,
            default: false
        },
        id: String,
        errorMessage: String,
        rules: String
    },
    methods: {
        updateValue: function updateValue(value) {
            this.$emit('input', value);
        }
    }
});